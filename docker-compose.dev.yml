# docker-compose --env-file docker-compose.dev.env up -d

services:
  spring-api-gateway-devonly:
    container_name: gateway-dev-service
    image: ${KCR_HOST}/mcp-hub-backend-dev/spring-api-gateway-devonly:latest
    ports:
      - 80:8000
    networks:
      - mm_dev_network

  mcp-hub-member:
    container_name: mcp-hub-member
    image: ${KCR_HOST}/mcp-hub-backend-dev/mcp-hub-member:latest
    ports:
      - 811:8080
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - mm_dev_network

  mcp-hub-workspace:
    container_name: mcp-hub-workspace
    image: ${KCR_HOST}/mcp-hub-backend-dev/mcp-hub-workspace:latest
    ports:
      - 812:8080
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - mm_dev_network

  mcp-hub-mcp:
    container_name: mcp-hub-mcp
    image: ${KCR_HOST}/mcp-hub-backend-dev/mcp-hub-mcp:latest
    ports:
      - 813:8080
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - mm_dev_network

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - mm_dev_network

  mysql:
    container_name: mysql
    image: mysql:8.0
    ports:
      - 3360:3306
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - mm_dev_network

  mongodb:
    container_name: mongodb
    image: mongo:latest
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
    networks:
      - mm_dev_network
    restart: always

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
      - mm_dev_network
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mm_dev_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    networks:
      - mm_dev_network

  kafka-exporter:
    container_name: kafka-exporter
    image: danielqsj/kafka-exporter:latest
    ports:
      - 9308:9308
    command:
      - '--kafka.server=kafka:9092'
    networks:
      mm_local_network:
        aliases:
          - kafka-exporter
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - /home/ubuntu/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - mm_dev_network

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - /home/ubuntu/monitoring/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - mm_dev_network

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /home/ubuntu/monitoring/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - mm_dev_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    networks:
      - mm_dev_network

  connect:
    # image: my-registry/kafka-connect:2.7.0   # DEPRECATED: 현재는 Dockerfile 을 통해 컨테이너 생성하도록 되어 있음
    build:
      context: .          # 현재 디렉토리의 Dockerfile 사용
      dockerfile: Dockerfile
    container_name: kafka-connect
    ports:
      - 8083:8083
    env_file:
      - ./local.env
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS} # todo 배포용 컴포즈 만들 때는 수정 필요
      CONNECT_GROUP_ID: cg-my-connector
      CONNECT_CONFIG_STORAGE_TOPIC: kafka-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: kafka-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: kafka-connect-statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /opt/kafka-plugins,/usr/share/confluent-hub-components
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      ENABLE_DEBEZIUM_SCRIPTING: "true"

      # (선택) register 스크립트용 변수
      CONNECT_URL: http://localhost:8083
      DEV_ENV_PATH: /etc/local.env

    depends_on:
      - kafka
      - mysql
      - mongodb
    volumes:
      # Source Connector
      - ./configs/connector-mcp-config.json:/etc/kafka-connect/connector-mcp-config.json
      - ./configs/connector-mcp-mcp_url-config.json:/etc/kafka-connect/connector-mcp-mcp_url-config.json
      - ./configs/connector-member-config.json:/etc/kafka-connect/connector-member-config.json
      # Mongo Sink Connector
      - ./configs/mongo-sink-mcpUrl-config.json:/etc/kafka-connect/mongo-sink-mcpUrl-config.json
      - ./configs/mongo-sink-config.json:/etc/kafka-connect/mongo-sink-config.json
      - ./configs/redis-sink-config.json:/etc/kafka-connect/redis-sink-config.json
      - ./configs/elasticsearch-sink-config.json:/etc/kafka-connect/elasticsearch-sink-config.json
      - ./local.env:/etc/local.env:ro
    networks:
      mm_local_network:
        ipv4_address: ${NETWORK_KAFKA_CONNECT_IP}



networks:
  mm_dev_network:
    name: mm_dev_network
    driver: bridge
    internal: false

volumes:
  prometheus_data:
  loki_data:
  grafana_data:
